////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step) {
  var arr = [];
  if(start === end){
    return [];
  }
  if(!step){
    step = 1;
  } if(step < 1){
    if(end < start){
      for(var i = start; i >= end; i--){
        arr.push(i);
      }
    }
  } if(step >= 1){
    for(var i = start; i <= end; i += step){
      arr.push(i);
    }
  }
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let total = 0;
  for(let value of array){
    total += value;
  }
  return total;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  var newArr = [];
  for(var i = arr.length - 1; i >= 0; i--){
    newArr.push(arr[i]);
  }
  return newArr;

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  for(let i = 0; i < Math.floor(array.length / 2); i++){
    let oldValue = array[i];
    array[i] = array[array.length - 1 - i];
    array[array.length - 1 - i] = oldValue;
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let list = null;
  for(let i = array.length - 1; i >= 0; i--){
    list = {value: array[i], rest: list};
  }
  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  let array = [];
  for(let arr = list; arr; arr = arr.rest){
    array.push(arr.value);
  }
  return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
  return {value, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
  if(!list){
    return undefined;
  } else if(n === 0){
    return list.value;
  } else{
    return nth(list.rest, n - 1);
  }
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
  if (a === b) {
    // items are identical
    return true;
  } else if (typeof a === 'object' && a !== null && typeof b === 'object' && b !== null) {
    let keys = Object.keys(a).concat(Object.keys(b));
    keys = keys.filter(
      function (value, index, self) { 
        return self.indexOf(value) === index;
	  }
    );
    for (let p of keys) {
      if (typeof a[p] === 'object' && typeof b[p] === 'object') {
        if (deepEqual(a[p], b[p]) === false) {
          return false;
        }
      } else if (a[p] !== b[p]) {
        return false;
      }
    }
    return true;
  } else {
   return false; 
  }
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
